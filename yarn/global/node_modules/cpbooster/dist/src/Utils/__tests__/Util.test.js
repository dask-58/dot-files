"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var Util_1 = __importDefault(require("../Util"));
describe("Util.test", function () {
    describe("sequence creation", function () {
        it("should return increasing sequence", function () {
            expect(Util_1.default.sequence(-10, -5)).toEqual([-10, -9, -8, -7, -6]);
            expect(Util_1.default.sequence(-5, 5)).toEqual([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4]);
            expect(Util_1.default.sequence(0, 3)).toEqual([0, 1, 2]);
        });
        it("should return decreasing sequence", function () {
            expect(Util_1.default.sequence(3, 0)).toEqual([3, 2, 1]);
            expect(Util_1.default.sequence(3, -3)).toEqual([3, 2, 1, 0, -1, -2]);
            expect(Util_1.default.sequence(-5, -10)).toEqual([-5, -6, -7, -8, -9]);
        });
        it("should return empty array when start == end", function () {
            expect(Util_1.default.sequence(3, 3)).toEqual([]);
            expect(Util_1.default.sequence(0, 0)).toEqual([]);
            expect(Util_1.default.sequence(-2, -2)).toEqual([]);
        });
        it("should return sequence of size one containing just `start` when end - start == 1", function () {
            expect(Util_1.default.sequence(3, 4)).toEqual([3]);
            expect(Util_1.default.sequence(-1, 0)).toEqual([-1]);
            expect(Util_1.default.sequence(-2, -1)).toEqual([-2]);
        });
        it("should return sequence of size one containing just `start` when start - end == 1", function () {
            expect(Util_1.default.sequence(4, 3)).toEqual([4]);
            expect(Util_1.default.sequence(0, -1)).toEqual([0]);
            expect(Util_1.default.sequence(-1, -2)).toEqual([-1]);
        });
    });
    describe("replaceExtraDotsWithUnderscore()", function () {
        test("common scenario", function () {
            expect(Util_1.default.replaceExtraDotsWithUnderscore("A.DistanceAndAxis.cpp")).toEqual("A_DistanceAndAxis.cpp");
        });
        it("should keep the same name if no dots in it", function () {
            expect(Util_1.default.replaceExtraDotsWithUnderscore("A_DistanceAndAxis.cpp")).toEqual("A_DistanceAndAxis.cpp");
        });
        it("should replace all dots with underscore except extension", function () {
            expect(Util_1.default.replaceExtraDotsWithUnderscore("A.Distance.And.Axis.cpp")).toEqual("A_Distance_And_Axis.cpp");
        });
    });
});

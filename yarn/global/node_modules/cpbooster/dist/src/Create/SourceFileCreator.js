"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
    cpbooster "Competitive Programming Booster"
    Copyright (C) 2020  Sergio G. Sanchez V.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
var fs = __importStar(require("fs"));
var Path = __importStar(require("path"));
var Util_1 = __importDefault(require("../Utils/Util"));
var SourceFileCreator = /** @class */ (function () {
    function SourceFileCreator() {
    }
    SourceFileCreator.create = function (filePath, config, timeLimitInMS, problemUrl) {
        if (timeLimitInMS === void 0) { timeLimitInMS = 3000; }
        var filename = Path.basename(filePath);
        var match = /\{[a-zA-Z](\.{2,}|-)[a-zA-Z]\}\.[a-zA-Z0-9]+/g.exec(filename);
        if (match) {
            var idx = match[0].indexOf("}");
            this.createMultiple(filePath, config, match[0][1], match[0][idx - 1], timeLimitInMS, problemUrl);
        }
        else {
            this.createSingle(filePath, config, timeLimitInMS, problemUrl);
        }
    };
    SourceFileCreator.createSingle = function (filePath, config, timeLimitInMS, problemUrl) {
        if (timeLimitInMS === void 0) { timeLimitInMS = 3000; }
        var langExtension = Util_1.default.getExtensionName(filePath);
        var filename = Util_1.default.normalizeFileName(Path.basename(filePath));
        filePath = Path.join(Path.dirname(filePath), filename);
        var template = "";
        var commentString = Util_1.default.getCommentString(langExtension, config);
        if (commentString) {
            template += commentString + " time-limit: " + timeLimitInMS + "\n";
            if (problemUrl) {
                template += commentString + " problem-url: " + problemUrl + "\n";
            }
        }
        var langConfig = config.languages[langExtension];
        if (langConfig === null || langConfig === void 0 ? void 0 : langConfig.template) {
            template += fs.readFileSync(langConfig.template).toString();
        }
        if (!fs.existsSync(filePath)) {
            fs.writeFileSync(filePath, template);
            console.info("Source file", filename, "created.");
        }
        else {
            console.info("Source file", filename, "already existed.");
        }
    };
    SourceFileCreator.createMultiple = function (filePath, config, start, end, timeLimitInMS, problemUrl) {
        var _a;
        if (timeLimitInMS === void 0) { timeLimitInMS = 3000; }
        if (start.length != 1 || end.length != 1) {
            throw new Error("incorrect format of start or end, it should be a single character");
        }
        var dirname = Path.dirname(filePath);
        var extension = Path.extname(filePath);
        var filePaths = [];
        var startCode = start.toLowerCase().charCodeAt(0);
        var endCode = end.toLowerCase().charCodeAt(0);
        if (endCode < startCode) {
            _a = [endCode, startCode], startCode = _a[0], endCode = _a[1];
        }
        for (var i = startCode; i <= endCode; i++) {
            filePaths.push(Path.join(dirname, String.fromCharCode(i) + extension));
        }
        for (var _i = 0, filePaths_1 = filePaths; _i < filePaths_1.length; _i++) {
            filePath = filePaths_1[_i];
            SourceFileCreator.createSingle(filePath, config, timeLimitInMS, problemUrl);
        }
    };
    return SourceFileCreator;
}());
exports.default = SourceFileCreator;

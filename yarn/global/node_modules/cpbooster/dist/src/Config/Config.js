"use strict";
/*
    cpbooster "Competitive Programming Booster"
    Copyright (C) 2020  Sergio G. Sanchez V.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs = __importStar(require("fs"));
var Path = __importStar(require("path"));
var os = __importStar(require("os"));
var process_1 = require("process");
var Util_1 = __importDefault(require("../Utils/Util"));
var Config = /** @class */ (function () {
    function Config() {
        this.contestsDirectory = Path.join(os.homedir(), "Contests");
        this.port = 1327;
        this.editor = "konsole";
        this.closeAfterClone = false;
        this.showStatusPageOnSubmit = true;
        this.useUserDefaultBrowser = true;
        this.preferredLang = "cpp";
        this.hideTestCaseInput = false;
        this.maxLinesToShowFromInput = 50;
        this.cloneInCurrentDir = false;
        this.languages = {
            cpp: {
                template: "",
                command: "g++ -std=gnu++17 -O2",
                debugCommand: "g++ -std=gnu++17 -DDEBUG -Wshadow -Wall",
                aliases: {
                    codeforces: "54",
                    atcoder: "4003",
                    omegaup: "cpp17-gcc",
                    szkopul: "C++",
                    yandex: "gcc7_3"
                },
                type: "compiled",
                commentString: "//"
            },
            py: {
                template: "",
                command: "python3",
                debugCommand: "python3 -O",
                aliases: {
                    codeforces: "31",
                    atcoder: "4006",
                    omegaup: "py3",
                    szkopul: "Python"
                },
                type: "interpreted",
                commentString: "#"
            },
            java: {
                template: "",
                command: "javac",
                debugCommand: "javac",
                runCommand: "java",
                aliases: {
                    codeforces: "36",
                    atcoder: "4005"
                },
                type: "mixed",
                commentString: "//"
            },
            js: {
                template: "",
                command: "node",
                debugCommand: "node",
                aliases: {
                    codeforces: "55",
                    atcoder: "4030"
                },
                type: "interpreted",
                commentString: "//"
            },
            rb: {
                template: "",
                command: "ruby",
                debugCommand: "ruby",
                aliases: {
                    codeforces: "67",
                    atcoder: "4049"
                },
                type: "interpreted",
                commentString: "#"
            },
            cs: {
                template: "",
                command: "msc",
                debugCommand: "msc",
                aliases: {
                    codeforces: "55",
                    atcoder: "4030",
                    omegaup: "cs"
                },
                type: "compiled",
                commentString: "//"
            },
            rs: {
                template: "",
                command: "rustc",
                debugCommand: "rustc",
                aliases: {
                    codeforces: "49",
                    atcoder: "4050"
                },
                type: "compiled",
                commentString: "//"
            },
            go: {
                template: "",
                command: "go build",
                debugCommand: "go build",
                aliases: {
                    codeforces: "32",
                    atcoder: "4026"
                },
                type: "compiled",
                commentString: "//"
            },
            kt: {
                template: "",
                command: "kotlinc",
                debugCommand: "kotlinc",
                runCommand: "kotlin",
                aliases: {
                    codeforces: "48",
                    atcoder: "4032"
                },
                type: "mixed"
            },
            scala: {
                template: "",
                command: "scalac",
                debugCommand: "scalac",
                runCommand: "scala",
                aliases: {
                    codeforces: "20",
                    atcoder: "4051"
                },
                type: "mixed"
            }
        };
    }
    Config.printAlreadyExistsMsg = function (configFilePath) {
        console.log("\"" + configFilePath + "\" already exists");
    };
    Config.printConfigWrittenMsg = function (configFilePath) {
        console.log("Your configuration file has been written in: \"" + configFilePath + "\"");
    };
    Config.write = function (configFilePath) {
        if (configFilePath === void 0) { configFilePath = this.defaultConfigFilePaths[0]; }
        if (fs.existsSync(configFilePath)) {
            this.printAlreadyExistsMsg(configFilePath);
        }
        else {
            fs.writeFileSync(configFilePath, JSON.stringify(new Config(), null, 2));
            this.printConfigWrittenMsg(configFilePath);
        }
    };
    Config.read = function (configFilePath) {
        var configFilePaths = configFilePath ? [configFilePath] : [];
        configFilePaths.push.apply(configFilePaths, this.defaultConfigFilePaths);
        for (var _i = 0, configFilePaths_1 = configFilePaths; _i < configFilePaths_1.length; _i++) {
            var configPath = configFilePaths_1[_i];
            if (fs.existsSync(configPath)) {
                // for now we are assuming that all the properties are defined in the config file
                var config = JSON.parse(fs.readFileSync(configPath, "utf8"));
                if (config.terminal && !config.editor) {
                    config.editor = config.terminal;
                }
                config.contestsDirectory = Util_1.default.replaceTildeWithAbsoluteHomePath(config.contestsDirectory);
                for (var _a = 0, _b = Object.values(config.languages); _a < _b.length; _a++) {
                    var langConfig = _b[_a];
                    if (langConfig) {
                        langConfig.template = Util_1.default.replaceTildeWithAbsoluteHomePath(langConfig.template);
                    }
                }
                return config;
            }
        }
        console.log("\nconfiguration file not found in any of the following locations:\n");
        for (var _c = 0, configFilePaths_2 = configFilePaths; _c < configFilePaths_2.length; _c++) {
            var configPath = configFilePaths_2[_c];
            console.log("->", configPath);
        }
        console.log("\nYou can create one in your $HOME directory by running 'cpbooster init'\n");
        process_1.exit(0);
    };
    Config.defaultConfigFilePaths = [
        Path.join(os.homedir(), "cpbooster-config.json"),
        Path.join(os.homedir(), ".cpbooster", "cpbooster-config.json"),
        Path.join(os.homedir(), ".config", "cpbooster", "cpbooster-config.json")
    ];
    return Config;
}());
exports.default = Config;

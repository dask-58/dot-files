"use strict";
/*
    cpbooster "Competitive Programming Booster"
    Copyright (C) 2020  Sergio G. Sanchez V.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var Tester_1 = __importDefault(require("./Tester"));
var InterpretedTester = /** @class */ (function (_super) {
    __extends(InterpretedTester, _super);
    function InterpretedTester(config, filePath) {
        return _super.call(this, config, filePath) || this;
    }
    InterpretedTester.prototype.testOne = function (testId, _compile) {
        var commandAsArray = this.getSegmentedCommand(this.langExtension, false);
        var _a = this.getTestVeredict(commandAsArray[0], __spreadArrays(commandAsArray.slice(1), [this.filePath]), testId, function () { return ({ status: true, feedback: "" }); }), veredict = _a.veredict, feedback = _a.feedback;
        this.printTestResults(veredict, feedback, testId);
        return veredict;
    };
    InterpretedTester.prototype.debugOne = function (testId, _compile) {
        var debugCommandAsArray = this.getSegmentedCommand(this.langExtension, true);
        this.runDebug(debugCommandAsArray[0], __spreadArrays(debugCommandAsArray.slice(1), [this.filePath]), testId);
    };
    InterpretedTester.prototype.debugWithUserInput = function (_compile) {
        var debugCommandAsArray = this.getSegmentedCommand(this.langExtension, true);
        this.runDebugWithUserInput(debugCommandAsArray[0], __spreadArrays(debugCommandAsArray.slice(1), [
            this.filePath
        ]));
    };
    return InterpretedTester;
}(Tester_1.default));
exports.default = InterpretedTester;

"use strict";
/*
    cpbooster "Competitive Programming Booster"
    Copyright (C) 2020  Sergio G. Sanchez V.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.submit = void 0;
var process_1 = require("process");
var Config_1 = __importDefault(require("../Config/Config"));
var OnlineJudgeFactory_1 = __importDefault(require("./OnlineJudgeFactory/OnlineJudgeFactory"));
var fs = __importStar(require("fs"));
var Path = __importStar(require("path"));
var Util_1 = __importDefault(require("../Utils/Util"));
function extractUrlFromFile(filePath, config) {
    var text = fs.readFileSync(filePath).toString();
    var commentString = Util_1.default.getCommentString(Path.extname(filePath), config);
    var re = new RegExp(String.raw(templateObject_1 || (templateObject_1 = __makeTemplateObject(["^s*", "s*problem-urls*:s*(.+)$"], ["^\\s*", "\\s*problem-url\\s*:\\s*(.+)$"])), commentString), "gm");
    var match = re.exec(text);
    if (match) {
        return match[1].trim();
    }
    else {
        return undefined;
    }
}
function submit(args) {
    var _a;
    var config = Config_1.default.read(args.configPath);
    var url = (_a = args.url) !== null && _a !== void 0 ? _a : extractUrlFromFile(args.filePath, config);
    if (!url) {
        var commentString = Util_1.default.getCommentString(Path.extname(args.filePath), config);
        console.log("Problem URL couldn't be found in file, please provide it as argument or" +
            " add it as a comment in your file in the following format:\n\n" +
            (commentString + " problem-url: <url>"));
        process_1.exit(0);
    }
    console.log("submitting...");
    var oj = OnlineJudgeFactory_1.default.getOnlineJudge(url);
    oj.submit(args.filePath, url, config, args.langAlias);
}
exports.submit = submit;
var templateObject_1;

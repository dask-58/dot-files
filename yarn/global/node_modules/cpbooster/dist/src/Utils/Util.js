"use strict";
/*
    cpbooster "Competitive Programming Booster"
    Copyright (C) 2020  Sergio G. Sanchez V.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var readline_1 = require("readline");
var events_1 = require("events");
var os = __importStar(require("os"));
var Path = __importStar(require("path"));
var LangExtensions_1 = require("./LangExtensions");
var Util = /** @class */ (function () {
    function Util() {
    }
    Util.isAlpha = function (char) {
        if (char.length != 1) {
            return false;
        }
        else {
            var thisCharCode = char.charCodeAt(0);
            if (("a".charCodeAt(0) <= thisCharCode && thisCharCode <= "z".charCodeAt(0)) ||
                ("A".charCodeAt(0) <= thisCharCode && thisCharCode <= "Z".charCodeAt(0))) {
                return true;
            }
            else {
                return false;
            }
        }
    };
    Util.isNum = function (char) {
        if (char.length != 1) {
            return false;
        }
        else {
            var thisCharCode = char.charCodeAt(0);
            if ("0".charCodeAt(0) <= thisCharCode && thisCharCode <= "9".charCodeAt(0)) {
                return true;
            }
            else {
                return false;
            }
        }
    };
    Util.isAlphaNum = function (char) {
        if (char.length != 1) {
            return false;
        }
        else {
            if (this.isAlpha(char) || this.isNum(char)) {
                return true;
            }
            else {
                return false;
            }
        }
    };
    Util.replaceAll = function (text, oldString, newString) {
        return text.split(oldString).join(newString);
    };
    Util.replaceExtraDotsWithUnderscore = function (fileName) {
        var fileNameNoDots = Array.from(fileName);
        var extensionDotFound = false;
        for (var i = fileName.length - 1; i >= 0; i--) {
            if (!extensionDotFound && fileName[i] === ".") {
                extensionDotFound = true;
                continue;
            }
            if (fileName[i] === ".") {
                fileNameNoDots[i] = "_";
            }
        }
        return fileNameNoDots.join("");
    };
    Util.normalizeFileName = function (fileName) {
        fileName = this.replaceExtraDotsWithUnderscore(fileName);
        var normalName = "";
        for (var _i = 0, fileName_1 = fileName; _i < fileName_1.length; _i++) {
            var c = fileName_1[_i];
            if (this.isAlphaNum(c) || this.allowedSpecialChars.has(c)) {
                normalName += c;
            }
        }
        return normalName;
    };
    Util.normalizeFilePath = function (filePath) {
        var dirPath = Path.dirname(filePath);
        return Path.join(dirPath, Util.normalizeFileName(Path.basename(filePath)));
    };
    Util.getCommentString = function (langExtension, config) {
        var langConfig = config.languages[langExtension];
        if (langConfig === null || langConfig === void 0 ? void 0 : langConfig.commentString) {
            return langConfig.commentString;
        }
        langExtension = Util.replaceAll(langExtension, ".", "").toLowerCase();
        var hashes = [LangExtensions_1.LangExtensions.python.toString(), LangExtensions_1.LangExtensions.ruby.toString()];
        if (hashes.includes(langExtension)) {
            return "#";
        }
        else {
            return "//";
        }
    };
    Util.readToEOF = function () {
        return __awaiter(this, void 0, void 0, function () {
            var rl, lines;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        rl = readline_1.createInterface({
                            input: process.stdin,
                            output: process.stdout
                        });
                        lines = "";
                        rl.on("line", function (line) {
                            lines += line + "\n";
                        });
                        return [4 /*yield*/, events_1.once(rl, "close")];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, lines];
                }
            });
        });
    };
    Util.repeat = function (str, times) {
        var ans = "";
        for (var i = 0; i < times; i++) {
            ans += str;
        }
        return ans;
    };
    Util.padCenter = function (str, width) {
        if (str.length >= width) {
            return str;
        }
        else {
            var remaningSpace = width - str.length;
            var spaceOnLeftSide = Math.floor(remaningSpace / 2);
            var spaceOnRightSide = remaningSpace - spaceOnLeftSide;
            var answer = this.repeat(" ", spaceOnLeftSide) + str + this.repeat(" ", spaceOnRightSide);
            return answer;
        }
    };
    /**
     * Creates a sequence of numbers from `start` to `end`
     *
     * @param {number} start The start of the sequence inclusively
     * @param {number} end The end of the sequence exclusively
     * @returns an array of size `end - start` containing the sequence of numbers in the range [start, end)
     */
    Util.sequence = function (start, end) {
        var n = Math.abs(end - start);
        var seq = new Array(n);
        var isDecreasing = start > end;
        for (var i = 0; i < n; i++, start += isDecreasing ? -1 : 1) {
            seq[i] = start;
        }
        return seq;
    };
    Util.getExtensionName = function (filePath) {
        return Path.extname(filePath).substr(1).toLowerCase();
    };
    Util.replaceTildeWithAbsoluteHomePath = function (contestsDirectory) {
        return contestsDirectory.replace("~", os.homedir());
    };
    Util.allowedSpecialChars = new Set(["_", "."]);
    return Util;
}());
exports.default = Util;

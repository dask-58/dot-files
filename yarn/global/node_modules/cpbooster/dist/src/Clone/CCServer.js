"use strict";
/*
    cpbooster "Competitive Programming Booster"
    Copyright (C) 2020  Sergio G. Sanchez V.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var express_1 = __importDefault(require("express"));
var fs = __importStar(require("fs"));
var Path = __importStar(require("path"));
var process_1 = require("process");
var child_process_1 = require("child_process");
var Util_1 = __importDefault(require("../Utils/Util"));
var SourceFileCreator_1 = __importDefault(require("../Create/SourceFileCreator"));
var os = __importStar(require("os"));
var EditorCommandBuilder_1 = require("./EditorCommandBuilder");
var chalk_1 = __importDefault(require("chalk"));
var Tester_1 = __importDefault(require("../Test/TesterFactory/Tester"));
/* Competitive Companion Server */
var CCServer = /** @class */ (function () {
    function CCServer(config) {
        var _this = this;
        this.app = express_1.default();
        this.contestName = "NO_NAME";
        this.isActive = false;
        this.lastRequestTime = process.hrtime();
        this.config = config;
        this.app.use(express_1.default.json());
        this.app.post("/", function (request, response) {
            response.writeHead(200, { "Content-Type": "text/html" });
            response.end("OK");
            var problemData = request.body;
            problemData.name = Util_1.default.normalizeFileName(problemData.name);
            problemData.group = Util_1.default.normalizeFileName(problemData.group);
            _this.contestName = problemData.group;
            var contestPath = config.cloneInCurrentDir
                ? _this.contestName
                : Path.join(config.contestsDirectory, problemData.group);
            if (!fs.existsSync(contestPath))
                fs.mkdirSync(contestPath, { recursive: true });
            var FilesPathNoExtension = "" + Path.join(contestPath, problemData.name);
            var extension = "." + config.preferredLang;
            var filePath = "" + FilesPathNoExtension + extension;
            SourceFileCreator_1.default.create(filePath, config, problemData.timeLimit, problemData.url);
            problemData.tests.forEach(function (testcase, idx) {
                fs.writeFileSync(Tester_1.default.getInputPath(filePath, idx + 1), testcase.input);
                fs.writeFileSync(Tester_1.default.getAnswerPath(filePath, idx + 1), testcase.output);
            });
            var tcLen = problemData.tests.length;
            console.log("-> " + problemData.tests.length + " Testcase" + (tcLen == 1 ? "" : "s"));
            console.log("-------------");
            if (!_this.isActive)
                _this.isActive = true;
            _this.lastRequestTime = process.hrtime();
        });
    }
    CCServer.prototype.run = function () {
        var _this = this;
        if (!this.config.preferredLang) {
            console.log("Missing preferred language (preferredLang) key in configuration");
            process_1.exit(0);
        }
        var serverRef = this.app.listen(this.config.port, function () {
            console.info("\nserver running at port:", _this.config.port);
            console.info('\nserver waiting for "Competitive Companion Plugin" to send problems...\n');
        });
        var interval = setInterval(function () {
            if (!_this.isActive)
                return;
            var elapsedTime = process.hrtime(_this.lastRequestTime)[0];
            var isWindows = os.type() === "Windows_NT" || os.release().includes("Microsoft");
            var tolerance = isWindows ? 10 : 1;
            if (elapsedTime >= tolerance) {
                if (serverRef)
                    serverRef.close();
                clearInterval(interval);
                var contestPath = _this.config.cloneInCurrentDir
                    ? _this.contestName
                    : Path.join(_this.config.contestsDirectory, _this.contestName);
                console.log("\n\t    DONE!\n");
                console.log("The path to your contest folder is: \"" + contestPath + "\"");
                console.log("\n\tHappy Coding!\n");
                var command = EditorCommandBuilder_1.getEditorCommand(_this.config.editor, contestPath);
                if (command) {
                    var newTerminalExec = child_process_1.spawn(command, { shell: true, detached: true, stdio: "ignore" });
                    newTerminalExec.unref();
                    if (_this.config.closeAfterClone && !isWindows) {
                        var execution = child_process_1.spawnSync("ps", ["-o", "ppid=", "-p", "" + process.ppid]);
                        var grandParentPid = parseInt(execution.stdout.toString().trim());
                        if (!Number.isNaN(grandParentPid)) {
                            process.kill(grandParentPid, "SIGKILL");
                        }
                    }
                }
                else {
                    console.log(chalk_1.default.yellow("The terminal specified in the configuration " +
                        "file is not fully supported yet, you will have to change your directory manually\n"));
                }
                process_1.exit(0);
            }
        }, 100);
    };
    return CCServer;
}());
exports.default = CCServer;

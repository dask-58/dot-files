"use strict";
/*
    cpbooster "Competitive Programming Booster"
    Copyright (C) 2020  Sergio G. Sanchez V.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var Veredict_1 = require("../../Types/Veredict");
var Util_1 = __importDefault(require("../../Utils/Util"));
var fs = __importStar(require("fs"));
var os_1 = __importDefault(require("os"));
var process_1 = require("process");
var chalk_1 = __importDefault(require("chalk"));
var child_process_1 = require("child_process");
var Path = __importStar(require("path"));
var Tester = /** @class */ (function () {
    function Tester(config, filePath) {
        if (!fs.existsSync(filePath)) {
            console.log("File not found: " + filePath);
            process_1.exit(0);
        }
        this.config = config;
        this.filePath = filePath;
        this.langExtension = Path.extname(this.filePath).slice(1).toLowerCase();
    }
    Tester.prototype.testAll = function (compile) {
        var testcasesIds = Tester.getTestCasesIds(this.filePath);
        if (testcasesIds.length == 0) {
            console.log("No testcases available for this file:", this.filePath);
            process_1.exit(0);
        }
        var veredict = this.testOne(testcasesIds[0], compile);
        if (veredict === Veredict_1.Veredict.CE || veredict === Veredict_1.Veredict.ERROR) {
            process_1.exit(0);
        }
        var acCnt = veredict === Veredict_1.Veredict.AC || veredict === Veredict_1.Veredict.AC_WHEN_TRIMMED ? 1 : 0;
        for (var i = 1; i < testcasesIds.length; i++) {
            veredict = this.testOne(testcasesIds[i], false);
            acCnt += veredict === Veredict_1.Veredict.AC || veredict === Veredict_1.Veredict.AC_WHEN_TRIMMED ? 1 : 0;
        }
        Tester.printScore(acCnt, testcasesIds.length);
    };
    Tester.prototype.extractTimeLimit = function () {
        var text = fs.readFileSync(this.filePath).toString();
        var commentString = Util_1.default.getCommentString(this.langExtension, this.config);
        var re = new RegExp(String.raw(templateObject_1 || (templateObject_1 = __makeTemplateObject(["^s*", "s*time-limits*:s*([0-9]+)s*$"], ["^\\s*", "\\s*time-limit\\s*:\\s*([0-9]+)\\s*$"])), commentString), "gm");
        var match = re.exec(text);
        var time = 3000; // Default time
        if (match) {
            time = parseInt(match[1]);
        }
        return time;
    };
    Tester.prototype.getFormattedVeredict = function (veredict) {
        switch (veredict) {
            case Veredict_1.Veredict.AC:
            case Veredict_1.Veredict.AC_WHEN_TRIMMED:
                return chalk_1.default.bgGreen(chalk_1.default.whiteBright(" A C "));
            case Veredict_1.Veredict.WA:
                return chalk_1.default.bgRed(chalk_1.default.whiteBright(" W A "));
            case Veredict_1.Veredict.RTE:
                return chalk_1.default.bgBlue(chalk_1.default.whiteBright(" R T E "));
            case Veredict_1.Veredict.TLE:
                return chalk_1.default.bgHex("#8d42f5")(chalk_1.default.whiteBright(" T L E "));
            case Veredict_1.Veredict.CE:
                return chalk_1.default.bgYellow(chalk_1.default.whiteBright(" Compilation Error "));
            default:
                return "UNDETERMINED";
        }
    };
    Tester.prototype.printTestResults = function (veredict, feedback, testId) {
        if (veredict !== Veredict_1.Veredict.CE) {
            console.log("Test Case " + testId + ":", this.getFormattedVeredict(veredict) + "\n");
            if (!this.config.hideTestCaseInput) {
                var input = fs.readFileSync(Tester.getInputPath(this.filePath, testId)).toString();
                console.log(chalk_1.default.bgWhite(chalk_1.default.black(" Input ")) + "\n");
                var inputLines = input.split(/\n|\r\n/);
                if (this.config.maxLinesToShowFromInput === 0 ||
                    inputLines.length <= this.config.maxLinesToShowFromInput) {
                    console.log(inputLines.join(os_1.default.EOL) + os_1.default.EOL);
                }
                else {
                    var reducedInputLines = __spreadArrays(inputLines.slice(0, this.config.maxLinesToShowFromInput), [
                        "... (the rest of the input is hidden)"
                    ]).join(os_1.default.EOL);
                    console.log(reducedInputLines + os_1.default.EOL);
                }
            }
        }
        else {
            console.log(this.getFormattedVeredict(veredict) + "\n");
        }
        console.log(feedback);
    };
    Tester.prototype.runDebug = function (execCommand, args, testId) {
        console.log("Running Test Case", testId, "with debugging flags\n");
        var execution = child_process_1.spawnSync(execCommand, __spreadArrays(args, ["<", "\"" + Tester.getInputPath(this.filePath, testId) + "\""]), { shell: true });
        if (execution.stdout.toString()) {
            console.log(execution.stdout.toString());
        }
        if (execution.stderr.toString()) {
            console.log(Util_1.default.replaceAll(execution.stderr.toString(), "runtime error", chalk_1.default.red("runtime error")));
        }
    };
    Tester.prototype.getTestVeredict = function (execCommand, args, testId, hasValidConditions, shouldCompile, compile) {
        var _a, _b, _c;
        var feedback = "";
        var finalVeredict = Veredict_1.Veredict.UNDETERMINED;
        if (shouldCompile && compile) {
            var compilationState = compile(false);
            if (!compilationState.status) {
                return { veredict: Veredict_1.Veredict.CE, feedback: compilationState.feedback };
            }
        }
        var preConditionState = hasValidConditions();
        if (!preConditionState.status) {
            feedback += preConditionState.feedback;
            finalVeredict = Veredict_1.Veredict.ERROR;
        }
        else {
            var execution = child_process_1.spawnSync(execCommand, args, {
                input: fs.readFileSync(Tester.getInputPath(this.filePath, testId)),
                timeout: this.extractTimeLimit() + 500
            });
            // TODO: Extract logic of each condition to small functions
            if ((_a = execution.error) === null || _a === void 0 ? void 0 : _a.message.includes("ETIMEDOUT")) {
                finalVeredict = Veredict_1.Veredict.TLE;
            }
            else if (execution.status !== 0) {
                if (execution.stdout.toString())
                    feedback += execution.stdout.toString() + "\n";
                if (execution.stderr.toString())
                    feedback += execution.stderr.toString() + "\n";
                finalVeredict = Veredict_1.Veredict.RTE;
            }
            else {
                var answerFilePath = Tester.getAnswerPath(this.filePath, testId);
                if (fs.existsSync(answerFilePath)) {
                    var output = (_c = (_b = execution.stdout) === null || _b === void 0 ? void 0 : _b.toString()) !== null && _c !== void 0 ? _c : "";
                    var ans = fs.readFileSync(answerFilePath).toString();
                    var trimmedOutput = output.trim();
                    var trimmedAns = ans.trim();
                    var outputLines = trimmedOutput.split("\n");
                    var ansLines = trimmedAns.split("\n");
                    var trimmedOutputLines_1 = outputLines.map(function (item) {
                        return item.trim(); // remove '\r' char if exists
                    });
                    var trimmedAnsLines_1 = ansLines.map(function (item) {
                        return item.trim(); // remove '\r' char if exists
                    });
                    var isTrimmedOutputSame = trimmedOutputLines_1.length === trimmedAnsLines_1.length &&
                        Util_1.default.sequence(0, trimmedAnsLines_1.length).every(function (index) { return trimmedOutputLines_1[index] === trimmedAnsLines_1[index]; });
                    if (isTrimmedOutputSame) {
                        if (ans !== output) {
                            feedback += chalk_1.default.yellow("Check leading and trailing blank spaces") + "\n\n";
                            finalVeredict = Veredict_1.Veredict.AC_WHEN_TRIMMED;
                        }
                        else {
                            finalVeredict = Veredict_1.Veredict.AC;
                        }
                        feedback += chalk_1.default.bgGreen(chalk_1.default.whiteBright(" Your Output ")) + "\n\n";
                        feedback += output;
                    }
                    else {
                        feedback += getOutputDiff(outputLines, ansLines);
                        finalVeredict = Veredict_1.Veredict.WA;
                    }
                }
                else {
                    feedback += "answer file not found in " + answerFilePath + "\n";
                    finalVeredict = Veredict_1.Veredict.RTE;
                }
                var outputFilePath = Tester.getOutputPath(this.filePath, testId);
                fs.writeFileSync(outputFilePath, execution.stdout.toString());
            }
        }
        return {
            veredict: finalVeredict,
            feedback: feedback
        };
    };
    Tester.prototype.runDebugWithUserInput = function (command, args) {
        if (args === void 0) { args = []; }
        console.log("Running with debugging flags\n\nEnter your input manually\n");
        child_process_1.spawnSync(command, args, { stdio: "inherit" });
    };
    Tester.getInputPath = function (filePath, testId) {
        var filePathNoExtension = filePath.substring(0, filePath.lastIndexOf("."));
        return Util_1.default.normalizeFilePath(filePathNoExtension + ".in" + testId);
    };
    Tester.getOutputPath = function (filePath, testId) {
        var filePathNoExtension = filePath.substring(0, filePath.lastIndexOf("."));
        return Util_1.default.normalizeFilePath(filePathNoExtension + ".out" + testId);
    };
    Tester.getAnswerPath = function (filePath, testId) {
        var filePathNoExtension = filePath.substring(0, filePath.lastIndexOf("."));
        return Util_1.default.normalizeFilePath(filePathNoExtension + ".ans" + testId);
    };
    Tester.getTestCasesIds = function (filePath) {
        var parsedPath = Path.parse(filePath);
        var directoryPath = parsedPath.dir;
        if (directoryPath == "")
            directoryPath = ".";
        var fileNameNoExtension = parsedPath.name;
        var testcasesFiles = fs
            .readdirSync(directoryPath)
            .filter(function (fileName) { return fileName.startsWith(fileNameNoExtension + ".in"); });
        var testcasesIds = [];
        testcasesFiles.forEach(function (filename) {
            var num = parseInt(filename.replace(fileNameNoExtension + ".in", ""));
            testcasesIds.push(num);
        });
        return testcasesIds.sort(function (tid1, tid2) { return tid1 - tid2; });
    };
    /**
     * @param {string} filePath path to the source code file
     * @returns the id with maximum numeric value from all the
     * test cases that correspond to `filePath`
     */
    Tester.getMaxTestCaseId = function (filePath) {
        var testCasesIds = Tester.getTestCasesIds(filePath);
        return testCasesIds.length === 0 ? 0 : Math.max.apply(Math, testCasesIds);
    };
    /**
     * Computes the unique Id of a testcase that does not exist yet,
     * useful to know what will be the id of the next new testcase
     * before actually creating it.
     * @param {string} filePath path to the source code file
     * @returns the id of the next testcase
     */
    Tester.getNextTestCaseId = function (filePath) {
        return Tester.getMaxTestCaseId(filePath) + 1;
    };
    Tester.createTestCase = function (filePath) {
        return __awaiter(this, void 0, void 0, function () {
            var thisTCId, input, answer;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        thisTCId = Tester.getNextTestCaseId(filePath);
                        console.log("\nPress ctrl+D to finish your input\n");
                        console.log("Test Case Input:\n");
                        return [4 /*yield*/, Util_1.default.readToEOF()];
                    case 1:
                        input = _a.sent();
                        console.log("\nTest Case Correct Output:\n");
                        return [4 /*yield*/, Util_1.default.readToEOF()];
                    case 2:
                        answer = _a.sent();
                        fs.writeFileSync(Tester.getInputPath(filePath, thisTCId), input);
                        fs.writeFileSync(Tester.getAnswerPath(filePath, thisTCId), answer);
                        console.log("\nTest case", thisTCId, "written.");
                        return [2 /*return*/];
                }
            });
        });
    };
    Tester.printScore = function (ac, total) {
        var plainmsg = "| " + ac.toString() + " / " + total + " AC |";
        var msg = "| " + ac.toString() + " / " + total + " " + chalk_1.default.greenBright("AC") + " |";
        if (ac == total)
            msg += " 🎉🎉🎉";
        var summary = "Summary: ";
        console.log();
        console.log(Util_1.default.repeat(" ", summary.length) + Util_1.default.repeat("+", plainmsg.length));
        console.log(summary + msg);
        console.log(Util_1.default.repeat(" ", summary.length) + Util_1.default.repeat("+", plainmsg.length));
        console.log();
    };
    Tester.printCompilationErrorMsg = function () {
        console.log(chalk_1.default.bgYellow(chalk_1.default.whiteBright(" Compilation Error ")), "\n");
    };
    Tester.prototype.getSegmentedCommand = function (langExtension, debug) {
        var langConfig = this.config.languages[langExtension];
        if (langConfig) {
            var segmentedCommand = void 0;
            if (debug) {
                segmentedCommand = langConfig.debugCommand.split(" ");
            }
            else {
                segmentedCommand = langConfig.command.split(" ");
            }
            // TODO: log message and exit(0) when segmentedCommand is empty
            return segmentedCommand;
        }
        else {
            console.log((debug ? "debug " : "") + "command not specified in cpbooster-config.json for " + langExtension + " files");
            process_1.exit(0);
        }
    };
    Tester.prototype.getCompilerCommand = function (langExtension, debug) {
        return this.getSegmentedCommand(langExtension, debug)[0];
    };
    return Tester;
}());
exports.default = Tester;
function getOutputDiff(trimmedOutputLines, trimmedAnsLines) {
    var outputDiff = "";
    var maxOutputWidth = 0;
    for (var i = 0; i < trimmedOutputLines.length; i++) {
        if (trimmedOutputLines[i].length > maxOutputWidth) {
            maxOutputWidth = trimmedOutputLines[i].length;
        }
    }
    var columnWidth = Math.min(Math.max(maxOutputWidth, 16), process.stdout.columns - 8);
    var leftHeader = chalk_1.default.bgRed(chalk_1.default.whiteBright(Util_1.default.padCenter("Your Output", columnWidth)));
    var rightHeader = chalk_1.default.bgGreen(chalk_1.default.whiteBright(Util_1.default.padCenter("Correct Answer", columnWidth)));
    outputDiff += leftHeader + "|" + rightHeader + "\n";
    outputDiff += "".padEnd(columnWidth) + "|" + "".padEnd(columnWidth) + "\n";
    for (var i = 0; i < Math.max(trimmedOutputLines.length, trimmedAnsLines.length); i++) {
        var line = "";
        if (i < trimmedOutputLines.length) {
            line += trimmedOutputLines[i].padEnd(columnWidth) + "|";
        }
        else {
            line += "".padEnd(columnWidth) + "|";
        }
        if (i < trimmedAnsLines.length) {
            line += trimmedAnsLines[i].padEnd(columnWidth);
        }
        else {
            line += "".padEnd(columnWidth);
        }
        if (i < trimmedOutputLines.length &&
            i < trimmedAnsLines.length &&
            trimmedOutputLines[i] === trimmedAnsLines[i]) {
            line += chalk_1.default.bgGreen("  ");
        }
        else {
            line += chalk_1.default.bgRed("  ");
        }
        outputDiff += line + "\n";
    }
    return outputDiff + "\n";
}
var templateObject_1;

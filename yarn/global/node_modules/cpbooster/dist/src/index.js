#!/usr/bin/env node
"use strict";
/*
    cpbooster "Competitive Programming Booster"
    Copyright (C) 2020  Sergio G. Sanchez V.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var update_notifier_1 = __importDefault(require("update-notifier"));
var yargs_1 = __importDefault(require("yargs"));
var os = __importStar(require("os"));
var Path = __importStar(require("path"));
var Clone_1 = require("./Clone/Clone");
var Test_1 = require("./Test/Test");
var Create_1 = require("./Create/Create");
var Init_1 = require("./Init/Init");
var Login_1 = require("./Login/Login");
var Submit_1 = require("./Submit/Submit");
var Stat_1 = require("./Stat/Stat");
var pkg = __importStar(require("../package.json"));
update_notifier_1.default({
    pkg: pkg,
    shouldNotifyInNpmScript: true,
    updateCheckInterval: 1000 * 60 * 60 * 2 // 2 hrs
}).notify({
    isGlobal: true,
    defer: false
});
var descriptions = {
    clone: "Run cpbooster as server for competitive companion plugin.",
    test: "Test your code against one or all (default) available test cases.",
    create: "Create a new source code file with the corresponding template loaded or multiple source files if a sequence is given as file name.",
    init: "Create a new configuration file with default values in $HOME directory or if --configPath is specified, it writes it in the given path.",
    login: "Log in to the specified Online Judge (i.e. Codeforces, AtCoder, ...).",
    submit: "Submit a source code file as a solution to a problem in an Online Judge (i.e. Codeforces, AtCoder, ...).",
    stat: "Outputs useful information about the specified problem/file in a format that is easy to parse from other tools"
};
yargs_1.default
    .usage("\nUsage: $0 <command> [options]\n\nRun `$0 <command> --help` to show help for an specific command.")
    .command("clone", descriptions.clone, function (serve_yargs) {
    serve_yargs
        .usage("\n" + descriptions.clone + "\n\nUsage: $0 clone [options]")
        .option("port", {
        alias: "p",
        type: "number",
        description: "Port where competitive companion plugin will send parsed data from problems"
    })
        .option("here", {
        type: "boolean",
        description: "Clones the contest or problem in current directory instead of your global contests directory"
    });
}, function (argv) { return Clone_1.clone(argv); })
    .command(["test <filePath>", "t"], descriptions.test + " Run `cpb test --help` to see more usage options", function (test_yargs) {
    test_yargs
        .usage("\n" +
        descriptions.test +
        " Refer to the options section to see all possible usages of this command." +
        "\n\nUsage: $0 test <filePath> [options]")
        .option("debug", {
        alias: "d",
        type: "boolean",
        description: 'Runs program using the corresponding "Debug Command" specified in the configuration file.' +
            "\n* If --testId is specified, it will use the given test case as input" +
            "\n* Otherwise, it will read the input from keyboard" +
            "\n Note: If the language does not support debugging flags, this option will be ignored"
    })
        .option("testId", {
        alias: "t",
        type: "number",
        description: "Specifies which testcase to use as input"
    })
        .option("noCompile", {
        alias: "nc",
        type: "boolean",
        description: "Skip compilation of program (assumes there is a corresponding binary file already)." +
            "\n Note: If the language does not require compilation, this option will be ignored"
    })
        .option("add", {
        alias: "a",
        type: "boolean",
        description: "Adds new test case for the given <filePath>"
    })
        .fail(function (msg, _, yargs) {
        yargs.showHelp();
        if (msg === "Not enough non-option arguments: got 0, need at least 1") {
            console.log("\nMissing <filePath> in arguments");
        }
        else {
            console.log("\n", msg);
        }
    });
}, function (argv) { return Test_1.test(argv); })
    .command(["create <filePath>", "c"], descriptions.create + " Run `cpb create --help` to see usage options and examples", function (create_yargs) {
    create_yargs
        .usage("\n" +
        descriptions.create +
        "\n\n* Usage 1: $0 create <filePath> [options]\n\n" +
        "    examples:\n" +
        "      > $0 create sourcefile.cpp\n" +
        "      > $0 create /home/cpbooster/sourcefile.py" +
        "\n\n* Usage 2: $0 create [DirectoryPath/]{from..to}<extension> [options]\n\n" +
        "    examples:\n" +
        "      > $0 create {a..d}.cpp (any amount of dots greater than 1 work)\n" +
        "      > $0 create /home/cpbooster/{a..d}.cpp\n" +
        "      > $0 create {a-d}.py (single dash also works)\n")
        .fail(function (msg, _, yargs) {
        yargs.showHelp();
        if (msg === "Not enough non-option arguments: got 0, need at least 1") {
            console.log("\nMissing <filePath> in arguments");
        }
        else {
            console.log("\n" + msg);
        }
    });
}, function (argv) { return Create_1.create(argv); })
    .command(["init", "i"], descriptions.init, function (new_yargs) {
    new_yargs
        .usage("\n" + descriptions.init + "\n\nUsage: $0 init [options]")
        .option("configPath", {
        type: "string",
        description: "Path where the JSON configuration file will be created" +
            ("\n[default: \"" + Path.join(os.homedir(), "cpbooster-config.json") + "\"]")
    });
}, function (argv) { return Init_1.init(argv); })
    .command(["login <url>", "l"], descriptions.login, function (new_yargs) {
    new_yargs
        .usage("\n" +
        descriptions.login +
        " The name of the Online Judge can be given instead of <url>." +
        "\n\nUsage: $0 login <url>")
        .fail(function (msg, _, yargs) {
        yargs.showHelp();
        if (msg === "Not enough non-option arguments: got 0, need at least 1") {
            console.log("\nMissing <url> in arguments");
        }
        else {
            console.log("\n" + msg);
        }
    });
}, function (argv) { return Login_1.login(argv); })
    .command(["submit <filePath> [url]", "s"], descriptions.submit, function (new_yargs) {
    new_yargs
        .usage("\n" + descriptions.submit + "\n\nUsage: $0 submit <filePath> [url]")
        .fail(function (msg, _, yargs) {
        yargs.showHelp();
        if (msg === "Not enough non-option arguments: got 0, need at least 1") {
            console.log("\nMissing <filePath> in arguments");
        }
        else {
            console.log("\n" + msg);
        }
    });
}, function (argv) { return Submit_1.submit(argv); })
    .command(["stat <filePath>"], descriptions.stat, function (new_yargs) {
    new_yargs
        .usage("\n" + descriptions.stat + "\n\nUsage: $0 stat <filePath> [options]")
        .option("nextTestCaseFilePaths", {
        type: "boolean",
        description: "Prints the paths of the next new testcase (<filePath>.in and <filePath>.ans files)"
    })
        .fail(function (msg, _, yargs) {
        yargs.showHelp();
        if (msg === "Not enough non-option arguments: got 0, need at least 1") {
            console.log("\nMissing <filePath> in arguments");
        }
        else {
            console.log("\n" + msg);
        }
    });
}, function (argv) { return Stat_1.stat(argv); })
    .help("help")
    .alias("help", "h")
    .alias("version", "v")
    .demandCommand()
    .strict()
    .option("configPath", {
    type: "string",
    description: "Path to JSON configuration file" +
        ("\n[default: \"" + Path.join(os.homedir(), "cpbooster-config.json") + "\"]")
}).argv;

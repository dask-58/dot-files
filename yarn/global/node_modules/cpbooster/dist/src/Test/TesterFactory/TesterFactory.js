"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var CompiledTester_1 = __importDefault(require("./CompiledTester"));
var process_1 = require("process");
var fs = __importStar(require("fs"));
var InterpretedTester_1 = __importDefault(require("./InterpretedTester"));
var LangExtensions_1 = require("../../Utils/LangExtensions");
var Util_1 = __importDefault(require("../../Utils/Util"));
var MixedTester_1 = __importDefault(require("./MixedTester"));
var TesterFactory = /** @class */ (function () {
    function TesterFactory() {
    }
    TesterFactory.getTester = function (config, filePath) {
        var _a, _b, _c;
        if (!fs.existsSync(filePath)) {
            console.log("File not found:", filePath);
            process_1.exit(0);
        }
        var langExtension = Util_1.default.getExtensionName(filePath);
        if (((_a = config.languages[langExtension]) === null || _a === void 0 ? void 0 : _a.type) === "compiled" ||
            this.compiledExtensions.has(langExtension)) {
            return new CompiledTester_1.default(config, filePath);
        }
        else if (((_b = config.languages[langExtension]) === null || _b === void 0 ? void 0 : _b.type) === "interpreted" ||
            this.interpretedExtensions.has(langExtension)) {
            return new InterpretedTester_1.default(config, filePath);
        }
        else if (((_c = config.languages[langExtension]) === null || _c === void 0 ? void 0 : _c.type) === "mixed" ||
            this.mixedExtensions.has(langExtension)) {
            return new MixedTester_1.default(config, filePath);
        }
        else {
            console.log("Language not supported");
            process_1.exit(0);
        }
    };
    TesterFactory.compiledExtensions = new Set([
        LangExtensions_1.LangExtensions.cpp.toString(),
        LangExtensions_1.LangExtensions.c.toString(),
        LangExtensions_1.LangExtensions.csharp.toString(),
        LangExtensions_1.LangExtensions.go.toString()
    ]);
    TesterFactory.interpretedExtensions = new Set([
        LangExtensions_1.LangExtensions.python.toString(),
        LangExtensions_1.LangExtensions.javascript.toString(),
        LangExtensions_1.LangExtensions.ruby.toString()
    ]);
    TesterFactory.mixedExtensions = new Set([
        LangExtensions_1.LangExtensions.java.toString(),
        LangExtensions_1.LangExtensions.kotlin.toString(),
        LangExtensions_1.LangExtensions.scala.toString()
    ]);
    return TesterFactory;
}());
exports.default = TesterFactory;

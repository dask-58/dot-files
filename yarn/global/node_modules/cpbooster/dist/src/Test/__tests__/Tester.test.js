"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var Tester_1 = __importDefault(require("../TesterFactory/Tester"));
var fs = __importStar(require("fs"));
jest.mock("fs");
describe("Tester.ts", function () {
    describe("test getMaxTestCaseId", function () {
        var problemName = "problemName";
        var problemFilePath = problemName + ".cpp";
        var readdirSyncMock = fs.readdirSync;
        beforeEach(function () {
            readdirSyncMock.mockReset();
        });
        test("common scenario", function () {
            readdirSyncMock.mockReturnValue([
                problemName + ".in1",
                problemName + ".ans1",
                problemName + ".in2",
                problemName + ".ans2",
                problemName + ".in3",
                problemName + ".ans3"
            ]);
            expect(Tester_1.default.getMaxTestCaseId(problemFilePath)).toEqual(3);
        });
        it("should return 0 when there are no testcases files", function () {
            readdirSyncMock.mockReturnValue([]);
            expect(Tester_1.default.getMaxTestCaseId(problemName)).toEqual(0);
        });
        it("should return the max id even when the sequence is not continuous", function () {
            readdirSyncMock.mockReturnValue([
                problemName + ".in1",
                problemName + ".ans1",
                problemName + ".in3",
                problemName + ".ans3",
                problemName + ".in6",
                problemName + ".ans6"
            ]);
            expect(Tester_1.default.getMaxTestCaseId(problemFilePath)).toEqual(6);
        });
    });
    describe("test getNextTestCaseId", function () {
        var problemName = "problemName";
        var problemFilePath = problemName + ".cpp";
        var readdirSyncMock = fs.readdirSync;
        beforeEach(function () {
            readdirSyncMock.mockReset();
        });
        test("common scenario", function () {
            readdirSyncMock.mockReturnValue([
                problemName + ".in1",
                problemName + ".ans1",
                problemName + ".in2",
                problemName + ".ans2",
                problemName + ".in3",
                problemName + ".ans3"
            ]);
            expect(Tester_1.default.getNextTestCaseId(problemFilePath)).toEqual(4);
        });
        it("should return 1 when there are no testcases files", function () {
            readdirSyncMock.mockReturnValue([]);
            expect(Tester_1.default.getNextTestCaseId(problemName)).toEqual(1);
        });
        it("should return the next to the max id even when the sequence is not continuous", function () {
            readdirSyncMock.mockReturnValue([
                problemName + ".in1",
                problemName + ".ans1",
                problemName + ".in3",
                problemName + ".ans3",
                problemName + ".in6",
                problemName + ".ans6"
            ]);
            expect(Tester_1.default.getNextTestCaseId(problemFilePath)).toEqual(7);
        });
    });
});
